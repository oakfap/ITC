#include "LedControl.h"
#include "FontLEDClock.h"
#include <SoftwareSerial.h>
SoftwareSerial mySerial(0, 1);

LedControl lc = LedControl(11, 12, 10, 4 );
int j = 0 ;
void setup() {

  Serial.begin(4800);
  short devices = lc.getDeviceCount ();
  mySerial.begin(4800);
  for (short address = 0 ; address < devices; address ++) {
    lc.shutdown(address, false);
    lc.setIntensity(address, 8);
    lc.clearDisplay(address);
  }


}

void loop() {
  if (mySerial.available())
  {
    j++;
    j %= 2;
    clear_display();
    char T[] = "  ";
    for (int i = 0; i < 2; i++) {
      Serial.println((char)mySerial.read());
      T[i] = (char)mySerial.read();
    }
    int k = 0;
    while (T[k]) {
      print_normal_char((j * 6) + 8, 1, T, 0); 
      k++;
    }
  }
}

void plot (uint8_t x, uint8_t y, uint8_t value, bool mode) {

  //select which matrix depending on the x coord
  uint8_t address;
  if (x >= 0 && x <= 7)   {
    address = 3;
  }
  if (x >= 8 && x <= 15)  {
    address = 2;
    x = x - 8;
  }
  if (x >= 16 && x <= 23) {
    address = 1;
    x = x - 16;
  }
  if (x >= 24 && x <= 31) {
    address = 0;
    x = x - 24;
  }
  if (mode) {
    if (value == 1) {
      lc.setLed(address, 7 - x, y, true);
    } else {
      lc.setLed(address, 7 - x, y, false);
    }
  } else if (!mode) {
    if (value == 1) {
      lc.setLed(address, y, x, true);
    } else {
      lc.setLed(address, y, x, false);
    }
  }
}


void print_normal_char(uint8_t x, uint8_t y, char c, bool mode)
{

  uint8_t dots;
  if (c >= 'A' && c <= 'Z' ) {
    c &= 0x1F;  // A-Z maps to 1-26
  }
  else if (c >= 'a' && c <= 'z') {
    c = (c - 'a') + 41;  // A-Z maps to 41-67
  }
  else if (c >= '0' && c <= '9') {
    c = (c - '0') + 31;
  }
  else if (c == ' ') {
    c = 0;  // space
  }
  else if (c == '.') {
    c = 27;  // full stop
  }
  else if (c == '\'') {
    c = 28;  // single quote mark
  }
  else if (c == ':') {
    c = 29;  // clock_mode selector arrow
  }
  else if (c == '>') {
    c = 30;  // clock_mode selector arrow
  }
  else if (c >= -80 && c <= -67) {
    c *= -1;
  }

  for (uint8_t col = 0; col < 5; col++) {
    dots = pgm_read_byte_near(&myfont[c][col]);
    for (uint8_t row = 0; row < 7; row++) {
      if (dots & (64 >> row)) {   // only 7 rows.
        plot(x + col, y + row, 1, mode);
      } else {
        plot(x + col, y + row, 0, mode);
      }
    }
  }
}

void clear_display() {
  for (uint8_t address = 0; address < 4; address++) {
    lc.clearDisplay(address);
  }
}
